name: Compile platform

# Controls when the workflow will run
on:
  workflow_call: # Allow reuse of this workflow
    inputs:
      platform:
        description: "Target platform, e.g. x86_64 or i386"
        required: true
        default: "x86_64"
        type: string
      target_stage:
        description: "Target stage, e.g. combined or basilisk2 or sheepshaver"
        required: true
        default: "combined"
        type: string
      runner:
        description: "Runner, specify ubuntu-24.04-arm for aarch64"
        required: false
        default: "ubuntu-latest"
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ inputs.runner }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repo
        uses: actions/checkout@v4
      
      - name: Compile
        run: sudo ./compile ${{ inputs.platform }} ${{ inputs.target_stage }}
      
      - name: Make nice directory name
        run: mv output macemu
        
      - name: Create tar.gz
        run: tar -czvf macemu-${{ inputs.platform }}-${{ inputs.target_stage }}.tar.gz macemu
      
      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macemu-${{ inputs.platform }}-${{ inputs.target_stage }}
          path: macemu-${{ inputs.platform }}-${{ inputs.target_stage }}.tar.gz
                
      # add to continuous release
      #- name: Upload .tar.gz asset to continuous release
      #  uses: "ncipollo/release-action@v1"
      #  with:
      #    tag: "continuous"
      #    name: "Continuous release"
      #    prerelease: false
      #    draft: false
      #    bodyFile: .github/AUTORELEASE.md
      #    allowUpdates: true
      #    artifacts: "macemu-${{ inputs.platform }}-${{ inputs.target_stage }}.tar.gz"
      #    artifactContentType: application/gzip
      
      # add AppImage direct downloads
      - name: Rename SheepShaver.AppImage for platform (if present)
        id: sheepshaver_appimage
        run: |
          mv macemu/SheepShaver.AppImage SheepShaver-${{ inputs.platform }}.AppImage && \
          echo "::set-output name=exists::yes" || \
          echo "::set-output name=exists::no"
        
      - name: Rename BasiliskII.AppImage for platform (if present)
        id: basilisk2_appimage
        run: |
          mv macemu/BasiliskII.AppImage BasiliskII-${{ inputs.platform }}.AppImage && \
          echo "::set-output name=exists::yes" || \
          echo "::set-output name=exists::no"
      
      - name: Upload SheepShaver AppImage direct asset to continuous release (if present)
        if: steps.sheepshaver_appimage.outputs.exists == 'yes'
        uses: "ncipollo/release-action@v1"
        with:
          tag: "continuous"
          name: "Continuous release"
          prerelease: false
          draft: false
          bodyFile: .github/AUTORELEASE.md
          allowUpdates: true
          artifacts: "SheepShaver-${{ inputs.platform }}.AppImage"
          artifactContentType: application/vnd.appimage
          
      - name: Upload BasiliskII AppImage direct asset to continuous release (if present)
        if: steps.basilisk2_appimage.outputs.exists == 'yes'
        uses: "ncipollo/release-action@v1"
        with:
          tag: "continuous"
          name: "Continuous release"
          prerelease: false
          draft: false
          bodyFile: .github/AUTORELEASE.md
          allowUpdates: true
          artifacts: "BasiliskII-${{ inputs.platform }}.AppImage"
          artifactContentType: application/vnd.appimage
