#! /bin/bash

# syntax:
# ./compile [ PLATFORM [ debug ] [ DOCKERFILE_STAGE ] ]

# usage examples:

# build combined package for x86_64
#   ./compile x86_64
# build BasiliskII package only, for x86_64
#   ./compile x86_64 basilisk2
# locally hosted macemu source
#   MACEMU_SOURCE=local ./compile x86_64
# enter debug shell for the SheepShaver build environment in i386
#   ./compile i386 debug buildenv-sheepshaver
# quick debug shell for non-crashing build
#   DOCKER_BUILDKIT=1 ./compile i386 debug buildenv-sheepshaver

{
	set -eu
	set -o pipefail
	
	# must be root to control docker
	if [ "$USER" != "root" ]
	then
		sudo -E "$0" $@
		exit
	fi
	
	SELF=$(readlink -f "$0")
	HERE=${SELF%/*}
	
	cd "$HERE"

	PLATFORM=${1:-}
	LXDEPLOY_ARCH=""
	PACKAGING="none"
	SKIP_VHD="y"
	SKIP_BINCUE="n"
	SKIP_NATMEM="y"
	MACEMU_SOURCE="${MACEMU_SOURCE:-git}"
	MACEMU_GIT_ARGS="--depth 1 https://github.com/kanjitalk755/macemu"
	case "${PLATFORM}" in
		""|"x86_64")
			echo "Building x86_64"
			DOCKER_SUFFIX="x86_64"
			DOCKER_PLATFORM="linux/x86-64"
			DISTRO="ubuntu:bionic"
			SKIP_VHD="n"
			SKIP_NATMEM="y"
			PACKAGING="linuxdeploy"
			LXDEPLOY_ARCH="x86_64"
		;;
		"i386")
			echo "Building ${PLATFORM}"
			DOCKER_SUFFIX="i386"
			DOCKER_PLATFORM="linux/386"
			DISTRO="ubuntu:bionic"
			SKIP_VHD="y" # does not compile on i386 as of 2025-02-02
			SKIP_NATMEM="y"
			PACKAGING="linuxdeploy"
			LXDEPLOY_ARCH="i386"
		;;
		"pi1"|"pi0")
			echo "Building Raspberry ${PLATFORM} (pi1, pi0) [EXPERIMENTAL]"
			echo "WARNING: SheepShaver is known not to build on this platform"
			echo "WARNING: No packager available for this platform"
			DOCKER_SUFFIX="pi1"
			DOCKER_PLATFORM="linux/arm/v5"
			DISTRO="balenalib/raspberry-pi-ubuntu:bionic-build"
		;;
		"pi2")
			echo "Building Raspberry ${PLATFORM} [EXPERIMENTAL]"
			echo "WARNING: SheepShaver is known not to build on this platform"
			echo "WARNING: No packager available for this platform"
			DOCKER_SUFFIX="pi2"
			DOCKER_PLATFORM="linux/arm/v7"
			DISTRO="balenalib/raspberry-pi2-ubuntu:bionic-build"
			#DISTRO="balenalib/raspberry-pi2-ubuntu:focal-build"
		;;
		"pi3"|"pi4"|"pi0v2")
			echo "Building Raspberry ${PLATFORM} (pi3, pi4, pi0v2) [EXPERIMENTAL]"
			echo "WARNING: SheepShaver is known not to build on this platform"
			echo "WARNING: No packager available for this platform"
			DOCKER_SUFFIX="pi3"
			DOCKER_PLATFORM="linux/arm/v7"
			DISTRO="balenalib/raspberrypi3-ubuntu:bionic-build"
		;;
		"aarch64")
			echo "Building ${PLATFORM} "
			DOCKER_SUFFIX="aarch64"
			DOCKER_PLATFORM="linux/arm64"
			DISTRO="balenalib/raspberrypi4-64-ubuntu:bionic-build"
			#DISTRO="balenalib/aarch64-ubuntu:bionic-build"
			#MACEMU_GIT_ARGS="--depth 1 https://github.com/cebix/macemu"
			PACKAGING="linuxdeploy"
			LXDEPLOY_ARCH="aarch64"
			SKIP_VHD="y" # vhd support switches addressing to banks, which may affect performance
			SKIP_NATMEM="n" # NATMEM is required for sheepshaver on aarch64
		;;
		*)
			echo "Invalid build platform specified: ${1}"
			exit 1
		;;
	esac
	
	echo "$(git config --get remote.origin.url) @ $(git log -1 --format="%ad") ($(git rev-parse --short HEAD))" > docker/build/version-macemu-appimage-builder
	
	# prepare empty output directory
	mkdir -p ./output
	rm -rf ./output/*
	
	touch ./compile.log
	# convenience: chown logs to the sudo caller
	if [ "${SUDO_USER:-}" != "" ]
	then
		chown "$SUDO_USER" -R ./compile.log
	fi
	
	if [ "${2:-}" = "debug" ]
	then
		TARGET="${3}"
		echo "Debugging stage $TARGET"
		sleep 2
		
		build_status=0
		# DOCKER_BUILDKIT=1 not applied so we can enter last intermediate image
		# NOTE: you can still prepend DOCKER_BUILDKIT=1 if you know the build succeeds to use your cache
		docker build \
			--platform $DOCKER_PLATFORM \
			--build-arg DISTRO=$DISTRO \
			--build-arg SKIP_VHD=$SKIP_VHD \
			--build-arg SKIP_NATMEM=$SKIP_NATMEM \
			--build-arg SKIP_BINCUE=$SKIP_BINCUE \
			--build-arg PACKAGING=$PACKAGING \
			--build-arg LXDEPLOY_ARCH=$LXDEPLOY_ARCH \
			--build-arg "MACEMU_SOURCE=$MACEMU_SOURCE" \
			--build-arg "MACEMU_GIT_ARGS=$MACEMU_GIT_ARGS" \
			--tag macemu-build:$TARGET-$DOCKER_SUFFIX \
			--target $TARGET \
			docker \
			2>&1 | tee compile.log \
		|| build_status=$?
		if [ "$build_status" = "0" ]
		then
			# image successfully created, start shell based on tag
			docker run --rm -it \
				--platform $DOCKER_PLATFORM \
				-v "$(realpath ./):/compiledir" \
				macemu-build:$TARGET-$DOCKER_SUFFIX \
				/bin/bash \
			;
		else
			# build failed, start shell based on last intermediate image
			last_intermediate=$(tac compile.log | grep -E " ---> [0-9a-f]{12}" | head -n1 | sed "s/ ---> //")
			if [ "$last_intermediate" != "" ]
			then
				docker run --rm -it \
					--platform $DOCKER_PLATFORM \
					-v "$(realpath ./):/compiledir" \
					sha256:$last_intermediate \
					/bin/bash \
				;
			fi
		fi
		exit
	else
		TARGET="${2:-combined}"
		echo "Building stage $TARGET (packaging: $PACKAGING)"
		sleep 2
		
		# DOCKER_BUILDKIT=1 currently required for custom --output
		DOCKER_BUILDKIT=1 docker build \
			--platform $DOCKER_PLATFORM \
			--build-arg DISTRO=$DISTRO \
			--build-arg SKIP_VHD=$SKIP_VHD \
			--build-arg SKIP_NATMEM=$SKIP_NATMEM \
			--build-arg SKIP_BINCUE=$SKIP_BINCUE \
			--build-arg PACKAGING=$PACKAGING \
			--build-arg LXDEPLOY_ARCH=$LXDEPLOY_ARCH \
			--build-arg "MACEMU_SOURCE=$MACEMU_SOURCE" \
			--build-arg "MACEMU_GIT_ARGS=$MACEMU_GIT_ARGS" \
			--tag macemu-build:$TARGET-$DOCKER_SUFFIX \
			--target $TARGET \
			--output=type=local,dest=./output \
			docker \
			2>&1 | tee compile.log \
		;
		
		#docker run --platform=$DOCKER_PLATFORM --rm \
		#	-v "$(realpath ./output):/externalOutput" \
		#	macemu-build:$TARGET-$DOCKER_SUFFIX \
		#	/bin/bash -c "cp -ax /output/* /externalOutput/" \
		#;
	fi
	
	# convenience: chown the output directory to the sudo caller
	if [ "${SUDO_USER:-}" != "" ]
	then
		chown "$SUDO_USER" -R ./output
	fi
	
	echo "BUILD COMPLETE"
	find ./output
	
	exit
}
